#!/usr/bin/env ruby

require "rubygems"
require "bundler/setup"
$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '../lib')

require 'git-process/git_lib'
require 'git-process/pull_request'
require 'git-process/git_process_options'
include GitProc

class PullRequestOptions
  include GitProcessOptions


  def summary
    "Creates or gets a Pull Request."
  end


  def description
    <<DESC
DESCRIPTION

This creates or gets a Pull Request on the GitHub server associated with the current \
branch. For the reasons why Pull Requests are useful for the development process, \
see https://help.github.com/articles/using-pull-requests

The "git pull-request" command is a nice, simplified alternative to using the \
web interface.

If no name or number is provided, it is assumed that you want to create a new \
pull request with the same name as the current branch.

If a number is given, or a number with a server preceding it (e.g., "origin/23"), \
then this assumes that the number refers to an existing pull request identified \
by that number. In that case, the branch associated with the HEAD of the pull \
request is checked out.

EXAMPLE

You've been developing your killer new feature or bug fix, and you want \
someone else to look at it (to do code-review or otherwise provide input). \
When you do "git pull-request", it synchronizes the current branch with \
the server (effectively executing "git sync") and creates the Pull Request \
against the integration branch. (Usually "master", but this can be changed; \
see below.)

The counterpart to this command is "git to-master".

NOTES

* It's assumed that you *never* do any work directly on "master":
  everything is done on a feature branch.  In addition to being a much
  safer and more flexible way of working in general, it is also a
  requirement to take advantage of Pull Request functionality.
* The first time you use a GitHub feature like this, you will be asked
  for your username and password. This does not store them, but instead
  uses them to get an OAuth2 token, which is stored in
  "git config gitProcess.github.authToken".
* If you want to use a different integration branch other than "master",
  set the "gitProcess.integrationBranch" configuration value. (e.g.,
  "git config gitProcess.integrationBranch my-integ-branch")

DESC
  end


  def usage(filename)
    "Usage: #{filename} [ options ] [pull_request_title | server/pull_request_number | pull_request_number]"
  end


  def extend_opts(parser)
    parser.opt :base_branch, "The branch on the server that you want this \"pulled\" into. "+
        "Defaults to the integration branch.", :type => :string
    parser.opt :head_branch, "The branch that you want reviewed before being \"pulled\" "+
        "into the base branch. Defaults to the current branch.", :type => :string
    parser.opt :repo_name, "The name of the repository to \"pull\" into. Defaults to "+
        "the current repository.", :type => :string
    parser.opt :description, "The description of the Pull Request. Usually includes a "+
        "nice description of what was changed to make things easier "+
        "for the reviewer.", :short => :d, :type => :string
    parser.opt :user, "Your GitHub username. Only needed the first time you connect, "+
        "and you will be prompted for it if needed.", :type => :string
    parser.opt :password, "Your GitHub password. Only needed the first time you connect, "+
        "and you will be prompted for it if needed.", :type => :string
  end


  def post_parse(opts, argv)
    arg = argv.shift
    if /^\d+$/ =~ arg
      opts[:prNumber] = arg
    elsif /^(.*)\/(\d+)$/ =~ arg
      m = /^(.*)\/(\d+)$/.match(arg)
      opts[:server] = m[1]
      opts[:prNumber] = m[2]
    else
      opts[:title] = arg
    end
  end

end

opts = PullRequestOptions.new.parse_cli(File.basename(__FILE__), ARGV)
GitProc::PullRequest.new(GitLib.new('.', opts), opts).run
