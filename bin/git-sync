#!/usr/bin/env ruby

require 'git-process/options/git_process_options'
require 'git-process/sync'

class SyncOptions
  include GitProc::GitProcessOptions

  def summary
    "Gets the latest changes that have happened on the integration branch, then pushes your changes to a \"private\" branch on the server."
  end


  def description
    <<DESC
DESCRIPTION

This fetches the latest repository from the server, rebases/merges the current branch \
against the changes in the integration branch, then pushes the result up to a branch on \
the server of the same name.

If there is a problem, such as a merge conflict, this tries to \
resolve it automatically. If it can not do so in an automated way, \
if tells you the steps involved for doing so manually.

EXAMPLE

Assuming that the current branch is called "interesting_changes" and the integration \
branch on the server is "master", typing "git sync" will do roughly the following \
for you:
  $ git fetch -p
  $ git merge origin/master
  $ git push origin interesting_changes:interesting_changes

DESC
  end


  def extend_opts(parser)
    parser.opt :rebase, "Rebase instead of merge against the integration branch"
    parser.opt :merge, "Merge instead of rebase against the integration branch", :short => :none, :default => true
    parser.opt :force, "Force the push; defaults to true if --rebase is used", :short => :f, :default => false

    parser.conflicts :rebase, :merge
  end


  def post_parse(opts, argv)
    opts[:force] = true if opts[:rebase]
    opts[:merge] = !opts[:rebase]
  end

end

GitProc::Sync.new('.', SyncOptions.new.parse_cli(File.basename(__FILE__), ARGV)).run
